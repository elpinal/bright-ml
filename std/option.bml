module Option :> sig
  datatype option 'a =
    | None
    | Some of 'a

  type t = option

  val is_none 'a : t 'a -> bool
  val is_some 'a : t 'a -> bool

  val unwrap_or 'a : 'a -> t 'a -> 'a
  val map_or 'a 'b : 'b -> ('a -> 'b) -> t 'a -> 'b

  include Monad.OPS where type t := t
  include Alternative.S where type t := t
end = struct
  datatype option 'a =
    | None
    | Some of 'a

  type t = option

  val is_none = function
    | None   -> true
    | Some _ -> false
  end

  val is_some = function
    | None   -> false
    | Some _ -> true
  end

  include Monad.Make struct
    type t = t

    val map f = function
      | None   -> None
      | Some x -> Some $ f x
    end

    val return = Some

    val apply a b = match a with
      | None   -> None
      | Some f -> map f b
    end

    val bind v f = match v with
      | None   -> None
      | Some x -> f x
    end
  end

  val unwrap_or def = function
    | None   -> def
    | Some x -> x
  end

  val map_or def f = function
    | None   -> def
    | Some x -> f x
  end

  val empty = None

  val `<>` x y =
    match x with
      | None   -> y
      | Some x -> Some x
    end
end

include Option : sig
  datatype option 'a =
    | None
    | Some of 'a
end
