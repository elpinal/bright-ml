module NonEmpty :> sig
  type t 'a

  val make 'a : 'a -> list 'a -> t 'a
  val cons 'a : 'a -> t 'a -> t 'a

  val from_list 'a : list 'a -> option (t 'a)
  val to_list   'a : t 'a -> list 'a

  include Comonad.S where type t := t

  val fold_left 'a 'b  : ('b -> 'a -> 'b) -> 'b -> t 'a -> 'b
  val fold_right 'a 'b : ('a -> 'b -> 'b) -> 'b -> t 'a -> 'b
end = struct
  type t 'a = 'a * list 'a

  val make x xs = (x, xs)

  val cons x (y, zs) = (x, y :: zs)

  val from_list = function
    | []      -> None
    | x :: xs -> Some(x, xs)
  end

  val to_list (x, xs) = x :: xs

  val map f (x, xs) = (f x, List.map f xs)

  val extract (x, _) = x

  val duplicate (x, xs) = ((x, xs), List.map (fun z -> (z, [])) xs)

  val fold_left f e (x, xs) = List.fold_left f (f e x) xs

  val fold_right f e (x, xs) =
    // `f` may induce side effects immediately after applied to 1 argument.
    let val r = List.fold_right f e xs in
    f x r
end
